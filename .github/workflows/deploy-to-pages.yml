name: Deploy Hugo site to Pages

on:
  workflow_run:
    workflows: ["Add Front Matter", "Configure Hugo Settings"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # 等待所有必要的工作流完成
  wait-for-workflows:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'
    outputs:
      ready: ${{ steps.check.outputs.ready }}
    steps:
      - id: check
        run: |
          # 获取最近的工作流运行状态
          ADD_FRONT_MATTER=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/add-front-matter.yml/runs?branch=main&per_page=1" \
            | jq -r '.workflow_runs[0].conclusion')
          
          CONFIGURE_SETTINGS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/configure-settings.yml/runs?branch=main&per_page=1" \
            | jq -r '.workflow_runs[0].conclusion')
          
          if [ "$ADD_FRONT_MATTER" = "success" ] && [ "$CONFIGURE_SETTINGS" = "success" ]; then
            echo "ready=true" >> $GITHUB_OUTPUT
          else
            echo "ready=false" >> $GITHUB_OUTPUT
          fi

  # 构建Hugo站点
  build:
    needs: wait-for-workflows
    if: needs.wait-for-workflows.outputs.ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Install PaperMod theme
        run: |2
          if [ ! -d "themes/PaperMod" ]; then
            git submodule add -b master https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
          fi

      - name: Create required pages
        run: |2
          # 创建必要的目录
          mkdir -p content

          # 创建搜索页面
          cat > content/search.md << 'EOL'
          ---
          title: "Search"
          layout: "search"
          summary: "search"
          placeholder: "搜索文章..."
          ---
          EOL

          # 创建归档页面
          cat > content/archives.md << 'EOL'
          ---
          title: "Archives"
          layout: "archives"
          url: "/archives/"
          summary: "archives"
          ---
          EOL

      - name: Copy and process content
        run: |2
          # 复制所有非隐藏文件到 content 目录，排除 README.md
          find . -type f \
            ! -path "*/\.*" \
            ! -path "*/themes/*" \
            ! -path "*/content/*" \
            ! -path "*/public/*" \
            ! -name "README.md" \
            ! -name "hugo.toml" \
            -exec cp --parents {} content/ \;

          # 修复 Markdown 文件中的相对引用路径
          process_markdown() {
            local file="$1"
            # 创建临时文件
            local temp_file=$(mktemp)
            
            # 使用 awk 处理 Markdown 文件
            awk '
              # 初始化变量
              BEGIN { in_code_block = 0 }
              
              # 检测代码块
              /^```/ { in_code_block = !in_code_block; print; next }
              
              # 在代码块内直接打印
              in_code_block { print; next }
              
              {
                # 处理图片链接: ![...](./path)
                line = $0
                while (match(line, /!\[([^\]])*\]\(\.\/[^)]*\)/)) {
                  prefix = substr(line, 1, RSTART-1)
                  matched = substr(line, RSTART, RLENGTH)
                  suffix = substr(line, RSTART+RLENGTH)
                  
                  sub(/\(\.\//, "(../", matched)
                  line = prefix matched suffix
                }
                
                # 处理普通链接: [...](./path)
                while (match(line, /\[[^\]]*\]\(\.\/[^)]*\)/)) {
                  prefix = substr(line, 1, RSTART-1)
                  matched = substr(line, RSTART, RLENGTH)
                  suffix = substr(line, RSTART+RLENGTH)
                  
                  sub(/\(\.\//, "(../", matched)
                  line = prefix matched suffix
                }
                
                # 处理HTML img标签
                while (match(line, /<img[^>]*src=["'\'']\.[^"'\'']*["'\''][^>]*>/)) {
                  prefix = substr(line, 1, RSTART-1)
                  matched = substr(line, RSTART, RLENGTH)
                  suffix = substr(line, RSTART+RLENGTH)
                  
                  sub(/src=["\'\''']\./, "src=\"../", matched)
                  line = prefix matched suffix
                }
                
                print line
              }
            ' "$file" > "$temp_file"
            
            # 替换原文件
            mv "$temp_file" "$file"
          }

          # 处理所有 Markdown 文件
          find content -type f -name "*.md" -print0 | while IFS= read -r -d '' file; do
            echo "处理文件: $file"
            process_markdown "$file"
          done

      - name: Use configured hugo.toml
        run: |2
          if [ -f ".github/hugo.toml" ]; then
            cp .github/hugo.toml ./hugo.toml
          else
            echo "错误：找不到 hugo.toml 配置文件"
            exit 1
          fi

      - name: Build site
        run: hugo --gc --minify

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # 部署到 GitHub Pages
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
