name: Deploy Hugo site to Pages

# 触发条件配置
on:
  push:
    branches: [ main ]      # 主分支推送时触发
  schedule:
    - cron: '0 2 * * *'     # 每日UTC时间2点自动构建（用于定期更新内容）
  workflow_dispatch:        # 允许手动触发工作流

# 权限配置（遵循最小权限原则）
permissions:
  contents: read           # 读取仓库内容
  pages: write             # 写入GitHub Pages
  id-token: write          # 用于OIDC令牌认证

# 并发控制（防止重复部署冲突）
concurrency:
  group: "pages"           # 同一分组共享并发控制
  cancel-in-progress: false # 不取消进行中的部署

jobs:
  build-deploy:
    runs-on: ubuntu-latest  # 使用最新Ubuntu运行器
    
    # 环境配置（连接GitHub Pages环境）
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # 部署后的URL
    
    env:
      CUSTOM_DOMAIN: ${{ github.event.repository.pages.cname }} # 自定义域名变量
    
    steps:
      # ---------------------------
      # 步骤1：代码检出（关键基础步骤）
      # ---------------------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'  # 递归检出子模块（适用于主题依赖）
          fetch-depth: 0          # 获取完整Git历史（用于提取文件时间信息）

      # ---------------------------
      # 步骤2：Hugo环境配置
      # ---------------------------
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'  # 自动获取最新稳定版
          extended: true          # 启用扩展版（支持Sass/SCSS）

      # ---------------------------
      # 步骤3：GitHub Pages配置
      # ---------------------------
      - name: Setup Pages
        uses: actions/configure-pages@v4  # 官方配置Actions

      # ---------------------------
      # 步骤4：主题安装与内容预处理（核心逻辑）
      # ---------------------------
      - name: Download PaperMod theme
        run: |
          # 安装PaperMod主题
          mkdir -p themes
          git clone https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod

          # Front Matter处理函数
          process_front_matter() {
            local file="$1"
            local title=$(basename "$file" .md)
            local category=$(dirname "$file" | sed 's|^./||') # 保留目录结构作为分类

            # 提取Git时间信息（ISO8601格式）
            created_date=$(git log --diff-filter=A --follow --format=%aI -- "$file" | tail -1) # 首次提交时间
            lastmod_date=$(git log -1 --format=%aI -- "$file") # 最后修改时间

            # 空值处理（防止无历史记录时出错）
            [ -z "$created_date" ] && created_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            [ -z "$lastmod_date" ] && lastmod_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

            # Front Matter处理逻辑
            if sed -n '1{/^---$/p};q' "$file" | grep -q "^---$"; then
              # 存在Front Matter的情况
              temp_file=$(mktemp)
              cp "$file" "$temp_file"

              # 移除旧日期字段（避免冲突）
              sed -i '/^date:/d; /^lastmod:/d' "$temp_file"

              # 插入新日期到Front Matter首部
              sed -i "1,/^---$/ {
                /^---$/i\
          date: $created_date\\
          lastmod: $lastmod_date
              }" "$temp_file"

              # 保留原始目录结构
              mkdir -p "content/$category"
              mv "$temp_file" "content/$category/$title.md"
            else
              # 无Front Matter的情况
              {
                echo "---"
                echo "title: \"$title\""           # 自动生成标题
                echo "date: $created_date"         # 基于Git的创建时间
                echo "lastmod: $lastmod_date"      # 基于Git的修改时间
                echo "categories: [\"$category\"]" # 目录结构作为分类
                echo "type: \"post\""              # 统一内容类型
                echo "---"
                cat "$file"                        # 保留原始内容
              } > "content/$category/$title.md"
            fi
          }

          # 批量处理Markdown文件
          find . -type f -name "*.md" ! -name "README.md" | while read file; do
            dir=$(dirname "$file" | sed 's|^./||') # 规范化目录路径
            mkdir -p "content/$dir"                # 重建目录结构
            process_front_matter "$file"           # 执行处理函数
          done

      # ---------------------------
      # 步骤5：自定义域名处理
      # ---------------------------
      - name: Retrieve custom domain
        id: fetch-domain
        run: |
          # 通过GitHub API获取Pages配置
          customDomain=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/pages \
            | jq -r '.cname // ""')  # 使用jq解析JSON响应

          # 环境变量传递
          echo "CUSTOM_DOMAIN=$customDomain" >> $GITHUB_ENV

      # ---------------------------
      # 步骤6：动态生成Hugo配置
      # ---------------------------
      - name: Configure Hugo
        run: |
          # 域名逻辑处理
          if [ -n "$CUSTOM_DOMAIN" ]; then
            domain="$CUSTOM_DOMAIN"       # 使用自定义域名
          else
            # 默认GitHub Pages路径
            owner="${GITHUB_REPOSITORY_OWNER}"
            repo="$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)"
            domain="$owner.github.io/$repo" 
          fi

          # 生成Hugo主配置
          cat > config.toml << EOL
          baseURL = "https://$domain"      # 动态基础URL
          languageCode = "zh-cn"           # 中文语言配置
          title = "${{ github.repository_owner }}'s Space" # 个性化标题
          theme = "PaperMod"               # 指定主题

          [params]
            mainSections = ["post"]        # 主内容区配置
            defaultTheme = "auto"          # 自动切换日间/夜间模式
            ShowReadingTime = true         # 显示阅读时间
            ShowShareButtons = false       # 关闭分享按钮
            ShowPostNavLinks = true        # 显示文章导航
            ShowBreadCrumbs = true         # 显示面包屑导航
            ShowCodeCopyButtons = true     # 显示代码复制按钮
            ShowToc = true                 # 显示目录

            [params.homeInfoParams]
              Title = "欢迎来到 ${{ github.repository_owner }} 的文档站"
              Content = "在喧嚣时代中静心思考，用文字传递理性与希望。"

            [[params.socialIcons]]
              name = "github"
              url = "https://github.com/${{ github.repository_owner }}"

          [outputs]
            home = ["HTML", "RSS", "JSON"] # 多格式输出

          [taxonomies]
            category = "categories"        # 分类系统配置
            tag = "tags"

          [menu]
            main = [
              {identifier = "archives", name = "Archives", url = "/archives/", weight = 10},
              {identifier = "categories", name = "Categories", url = "/categories/", weight = 20},
              {identifier = "search", name = "Search", url = "/search/", weight = 30},
              {identifier = "tags", name = "Tags", url = "/tags/", weight = 40}
            ]
          EOL

          # 创建必要目录
          mkdir -p content

          # 生成搜索页
          cat > content/search.md << EOL
          ---
          title: "Search"
          layout: "search"       # 使用主题的搜索布局
          summary: "search"
          placeholder: "搜索文章..."
          ---
          EOL

          # 生成归档页
          cat > content/archives.md << EOL
          ---
          title: "Archives"
          layout: "archives"     # 使用主题的归档布局
          url: "/archives/"
      
