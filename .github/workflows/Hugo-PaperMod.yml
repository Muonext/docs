name: Deploy Hugo site to Pages

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # UTC 每天2点
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    env:
      CUSTOM_DOMAIN: ${{ github.event.repository.pages.cname }}
    
    steps:
      # 1. 检出代码（建议 fetch-depth 设置为 0，拉取所有提交历史，确保能拿到文件创建时间）
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      # 2. 设置 Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      # 3. 配置 GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # 4. 下载 PaperMod 主题 & 处理文档
      #
      #   此步骤中：
      #   - 我们先下载主题 PaperMod 到 themes/PaperMod。
      #   - 对仓库内所有 .md 文件（排除 README.md）进行处理：
      #       1. 获取该文件在 Git 历史中的首次提交时间作为 `date`。
      #       2. 获取该文件最新一次提交的提交时间作为 `lastmod`。
      #       3. 如果原文件已有 Front Matter，则只更新/覆盖其中的 date、lastmod、type 字段；
      #          保留其他字段不变。
      #       4. 如果原文件没有 Front Matter，则自动生成带上述字段的新 Front Matter。
      #       5. 将处理结果写到 `content/<子目录>/<文件名>.md` 中。
      #
      - name: Download PaperMod theme
        run: |
          mkdir -p themes
          git clone https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
          
          # 函数：为每个 Markdown 文件写入或更新 Front Matter
          generate_front_matter() {
            local file="$1"
            local title
            local category
            local creationDate
            local lastModDate

            title=$(basename "$file" .md)
            # 根据文件所在的相对路径来做分类（可根据需要自行调整）
            category=$(dirname "$file" | sed 's|^./||')

            # 获取文件创建日期 (首次提交时间)
            creationDate=$(git log --diff-filter=A --format=%aI -1 "$file" 2>/dev/null || true)
            # 若获取不到，则给个默认值（比如当前时间）
            if [ -z "$creationDate" ]; then
              creationDate=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            fi

            # 获取文件最后一次提交的提交时间
            lastModDate=$(git log -1 --format=%cI "$file" 2>/dev/null || true)
            # 同样，如果没有拿到，就给个默认值
            if [ -z "$lastModDate" ]; then
              lastModDate=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            fi

            # 读取原文件的 front matter（若有）
            # 将其存入变量 front_matter_block
            front_matter_block=$(sed -n '/^---$/,/^---$/p' "$file")

            # 输出到的目标位置
            outdir="content/$category"
            outfile="$outdir/$title.md"

            mkdir -p "$outdir"

            if [ -n "$front_matter_block" ]; then
              # 如果源文件已有 front matter，则仅更新其中的 date / lastmod / type
              # 1. 移除头尾的 "---"
              trimmed=$(echo "$front_matter_block" | sed '1d;$d')

              # 2. 移除已有的 date、lastmod、type 字段（若存在）
              trimmed=$(echo "$trimmed" | sed -E '/^(date|lastmod|type):/d')

              # 3. 重新写入新的 date / lastmod / type
              new_front_matter="---\n${trimmed}\ndate: $creationDate\nlastmod: $lastModDate\ntype: \"post\"\n---"

              # 4. 获取 front matter 后面的正文
              #    由于我们用 sed -n '/^---$/,/^---$/p' 已经截取了 front matter，
              #    所以正文就是去掉那部分后剩余的内容
              #    （注：如果源文件 front matter 在开头，下面命令可正常截取）
              body=$(sed '1,/^---$/d' "$file" | sed '/^---$/,$d')

              # 写到目标位置
              {
                echo "$new_front_matter"
                echo "$body"
              } > "$outfile"

            else
              # 若没有 front matter，则自动生成
              {
                echo "---"
                echo "title: \"$title\""
                echo "date: $creationDate"
                echo "lastmod: $lastModDate"
                echo "categories: [\"$category\"]"
                echo "type: \"post\""
                echo "---"
                cat "$file"
              } > "$outfile"
            fi
          }

          # 遍历所有 md 文件（排除 README.md），逐一处理
          find . -type f -name "*.md" ! -name "README.md" | while read file; do
            generate_front_matter "$file"
          done

      # 5. 获取自定义域名
      - name: Retrieve custom domain
        id: fetch-domain
        run: |
          customDomain=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/pages \
          | jq -r '.cname // ""')
          echo "CUSTOM_DOMAIN=$customDomain" >> $GITHUB_ENV

      # 6. 创建并写入 Hugo 配置
      - name: Configure Hugo
        run: |
          if [ -n "$CUSTOM_DOMAIN" ]; then
            domain="$CUSTOM_DOMAIN"
          else
            owner="${GITHUB_REPOSITORY_OWNER}"
            repo="$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)"
            domain="$owner.github.io/$repo"
          fi

          cat > config.toml << EOL
          baseURL = "https://$domain"
          languageCode = "zh-cn"
          title = "${{ github.repository_owner }}'s Space"
          theme = "PaperMod"

          [params]
            # 指定 mainSections 只有一个: "post"
            mainSections = ["post"]
            defaultTheme = "auto"
            ShowReadingTime = true
            ShowShareButtons = false
            ShowPostNavLinks = true
            ShowBreadCrumbs = true
            ShowCodeCopyButtons = true
            ShowToc = true

            [params.homeInfoParams]
              Title = "欢迎来到 ${{ github.repository_owner }} 的文档站"
              Content = "在喧嚣时代中静心思考，用文字传递理性与希望。"

            [[params.socialIcons]]
              name = "github"
              url = "https://github.com/${{ github.repository_owner }}"

          [outputs]
            home = ["HTML", "RSS", "JSON"]

          [taxonomies]
            category = "categories"
            tag = "tags"

          [menu]
            main = [
              {identifier = "archives", name = "Archives", url = "/archives/", weight = 10},
              {identifier = "categories", name = "Categories", url = "/categories/", weight = 20},
              {identifier = "search", name = "Search", url = "/search/", weight = 30},
              {identifier = "tags", name = "Tags", url = "/tags/", weight = 40}
            ]
          EOL

          # 至少留个 content 目录
          mkdir -p content

          # 搜索页面
          cat > content/search.md << EOL
          ---
          title: "Search"
          layout: "search"
          summary: "search"
          placeholder: "搜索文章..."
          ---
          EOL

          # 归档页面
          cat > content/archives.md << EOL
          ---
          title: "Archives"
          layout: "archives"
          url: "/archives/"
          summary: "archives"
          ---
          EOL

      # 7. Hugo 构建
      - name: Build site
        run: hugo --minify

      # 8. 上传构建产物
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      # 9. 部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
